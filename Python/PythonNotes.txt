
Python Concepts
It covers topics like Scalar Types, Operators and Control Flow, Strings, Collections and Iteration, Modularity, Objects and Types and Classes


Python is completely object oriented, and not "statically typed". You do not need to declare variables before using them, or declare their type. Every variable in Python is an object.

 integers(whole numbers) and floating point numbers(decimals).

 typecast 
 myfloat = float(7)

 Strings are defined either with a single quote or a double quotes.
 The difference between the two is that using double quotes makes it easy to include apostrophes (whereas these would terminate the string if using single quotes)
 There are additional variations on defining strings that make it easier to include things such as carriage returns, backslashes and Unicode characters.

Assignments can be done on more than one variable "simultaneously" on the same line like this
 a, b = 3, 4
print(a, b)

Mixing operators between numbers and strings is not supported:
TypeError: unsupported operand type(s) for +: 'int' and 'str'

list - index starts with 0 
numbers = [1,2,3]
strings = ['hello','world']
names = ["John", "Eric", "Jessica"]

# write your code here
second_name = names[1]

Arithematic Operator
Just as any other programming languages, the addition, subtraction, multiplication, and division operators can be used with numbers.

Another operator available is the modulo (%) operator, which returns the integer remainder of the division. dividend % divisor = remainder.

Python also supports multiplying strings to form a string with a repeating sequence
lotsofhellos = "hello" * 10 => print multiple times

Join 2 list 
Using Operators with Lists
even_numbers = [2,4,6,8]
odd_numbers = [1,3,5,7]
all_numbers = odd_numbers + even_numbers


Just as in strings, Python supports forming new lists with a repeating sequence using the multiplication operator:
print([1,2,3] * 3)

name = "John"
print("Hello, %s!" % name) //Hello, John!

To use two or more argument specifiers, use a tuple (parentheses):
name = "John"
age = 23
print("%s is %d years old." % (name, age))

Any object which is not a string can be formatted using the %s 
mylist = [1,2,3]
print("A list: %s" % mylist)

%s - String (or any object with a string representation, like numbers)

%d - Integers

%f - Floating point numbers

%.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot.

%x/%X - Integers in hex representation (lowercase/uppercase)


print(astring.index("o"))
print(astring.count("l"))
astring = "Hello world!"
print(astring[3:7])
print(astring[3:7:2]) -> start3 to end7 and negative2


s = "Strings are awesome!"
# Length should be 20
print("Length of s = %d" % len(s))

# First occurrence of "a" should be at index 8
print("The first occurrence of the letter a = %d" % s.index("a"))

# Number of a's should be 2
print("a occurs %d times" % s.count("a"))

# Slicing the string into bits
print("The first five characters are '%s'" % s[:5]) # Start to 5
print("The next five characters are '%s'" % s[5:10]) # 5 to 10
print("The thirteenth character is '%s'" % s[12]) # Just number 12
print("The characters with odd index are '%s'" %s[1::2]) #(0-based indexing)
print("The last five characters are '%s'" % s[-5:]) # 5th-from-last to end

# Convert everything to uppercase
print("String in uppercase: %s" % s.upper())

# Convert everything to lowercase
print("String in lowercase: %s" % s.lower())

# Check how a string starts
if s.startswith("Str"):
    print("String starts with 'Str'. Good!")

# Check how a string ends
if s.endswith("ome!"):
    print("String ends with 'ome!'. Good!")
    
# Split the string into three separate strings,
# each containing only a word
print("Split the words of the string: %s" % s.split(" "))    


Conditional Operator 
-------------------
Boolean - and or 
if name in ["John", "Rick"]:   In Operator
if statement is True | is operator 

A statement is evaulated as true if one of the following is correct: 1. The "True" boolean variable is given, or calculated using an expression, such as an arithmetic comparison. 2. An object which is not considered "empty" is passed.
Here are some examples for objects which are considered as empty: 1. An empty string: "" 2. An empty list: [] 3. The number zero: 0 4. The false boolean variable: False

The is Operator 
Unlike the double equals operator "==", the "is" operator does not match the values of the variables, but the instances themselves. 

The not operator 
Using "not" before a boolean expression inverts it


loops
----------------------------
primes = [2, 3, 5, 7]
for prime in primes:
    print(prime)
----------------------------    
# Prints out the numbers 0,1,2,3,4
for x in range(5):
    print(x)

# Prints out 3,4,5
for x in range(3, 6):
    print(x)

# Prints out 3,5,7
for x in range(3, 8, 2):
    print(x)

    


-----------------------

count = 0
while count < 5:
    print(count)
    count += 1  # This is the same as count = count + 1
    
Break and continue statement 
break is used to exit a for loop or a while loop, whereas continue is used to skip the current block, 

Functions are a convenient way to divide your code into useful blocks, 
allowing us to order our code, make it more readable, reuse it and save some time. 
Also functions are a key way to define interfaces so programmers can share their code.

Objects are an encapsulation of variables and functions into a single entity. Objects get their variables and functions from classes. Classes are essentially a template to create your objects.

class MyClass:
    variable = "blah"

    def function(self):
        print("This is a message inside the class.")

myobjectx = MyClass()
myobjecty = MyClass()

myobjecty.variable = "yackity"

# Then print out both values
print(myobjectx.variable)
print(myobjecty.variable)

The __init__() function, is a special function that is called when the class is being initiated. It's used for assigning values in a class.

class NumberHolder:

   def __init__(self, number):
       self.number = number

   def returnNumber(self):
       return self.number

var = NumberHolder(7)
print(var.returnNumber()) #Prints '7'

A dictionary is a data type similar to arrays, but works with keys and values instead of indexes. Each value stored in a dictionary can be accessed using a key, which is any type of object (a string, a number, a list, etc.) instead of using its index to address it

phonebook = {}
phonebook["John"] = 938477566
phonebook["Jack"] = 938377264
phonebook["Jill"] = 947662781
print(phonebook)

phonebook = {
    "John" : 938477566,
    "Jack" : 938377264,
    "Jill" : 947662781
}
print(phonebook) 
del phonebook["John"] | remove a value from dictionary 
phonebook.pop("John")

Dictionaries can be iterated over, just like a list. However, a dictionary, unlike a list, does not keep the order of the values stored in it. To iterate over key value pairs, use the following syntax
phonebook = {"John" : 938477566,"Jack" : 938377264,"Jill" : 947662781}
for name, number in phonebook.items():
    print("Phone number of %s is %d" % (name, number))

Modules in Python are just Python files with a .py extension. The name of the module is the same as the file name. A Python module can have a set of functions, classes, or variables defined and implemented.

# game.py
# import the draw module
import draw

def play_game():
    ...

def main():
    result = play_game()
    draw.draw_game(result)

# this means that if this script is executed, then 
# main() will be executed
if __name__ == '__main__':
    main()
    
    
A namespace is a system where every object is named and can be accessed in Python. We import the function draw_game into the main script's namespace by using the from command.

# game.py
# import the draw module
from draw import draw_game

def main():
    result = play_game()
    draw_game(result)
    
    
# game.py
# import the draw module
from draw import *

def main():
    result = play_game()
    draw_game(result)    
    
    
python: Two modules and classes with the same name under different packages

You want to import the User modules in the package __init__.py files to make them available as attributes.

So in both Helper/__init_.py and Controller/__init__.py add:

from . import User
This makes the module an attribute of the package and you can now refer to it as such.

Alternatively, you'd have to import the modules themselves in full:

import ShutterDeck.Controller.User
import ShutterDeck.Helper.User

u1=ShutterDeck.Controller.User.User()
u2=ShutterDeck.Helper.User.User()
so refer to them with their full names.

Another option is to rename the imported name with as:

from ShutterDeck.Controller import User as ControllerUser
from ShutterDeck.Helper import User as HelperUser

u1 = ControllerUser.User()
u2 = HelperUser.User()

Module initialization
The first time a module is loaded into a running Python script, it is initialized by executing the code in the module once. If another module in your code imports the same module again, it will not be loaded again, so local variables inside the module act as a "singleton," meaning they are initialized only once.

There are a couple of ways to tell the Python interpreter where to look for modules, aside from the default local directory and built-in modules. You can use the environment variable PYTHONPATH to specify additional directories to look for modules like this

PYTHONPATH=/foo python game.py
This executes game.py, and enables the script to load modules from the foo directory, as well as the local directory.


You may also use the sys.path.append function. Execute it before running the import command
sys.path.append("/foo")
Now the foo directory has been added to the list of paths where modules are looked for.

To import the module urllib, which enables us to create read data from URLs, we import the module:

# import the library
import urllib
# use it
urllib.urlopen(...)

We can look for which functions are implemented in each module by using the dir function:
>>> import urllib
>>> dir(urllib)

When we find the function in the module we want to use, we can read more about it with the help function, using the Python interpreter:

help(urllib.urlopen)

Writing packages 
Packages are namespaces containing multiple packages and modules

Each package in Python is a directory which MUST contain a special file called __init__.py. This file, which can be empty, indicates that the directory it's in is a Python package. That way it can be imported the same way as a module.

